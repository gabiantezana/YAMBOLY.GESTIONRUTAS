@model YAMBOLY.GESTIONRUTAS.VIEWMODEL.GeoLocation.MapViewModel
@{
    ViewBag.Title = "TESTING";
    ViewBag.Icon = "users";
    ViewBag.Section = String.Empty;
    ViewBag.Subsection = String.Empty;
}

@section Breadcrumbs{

}
<div class="panel">
    <div clss="panel-body">
        <div class="row">
            <div class="col-md-2">
                <div class="form-group">
                    <label for="input-search" class="sr-only">Search Tree:</label>
                    <input type="input" class="form-control" id="input-search" placeholder="Buscar..." value="">
                </div>
                <div id="tree" class="treeview"></div>
            </div>
            <div class="col-md-10">
                <input type="button" id="RemoveSelectedPolygon" value="Eliminar" onclick="RemoveSelectedPolygon(this)" style="display:none" />
                <div>
                    <input type="button" id="createShapeButton" value="Create shape" onclick="OnClickButton(BUTTONMODE.Create)" style="display:none" />
                    <input type="button" id="editShapeButton" value="Edit shape" onclick="OnClickButton(BUTTONMODE.Edit)" style="display:none" />
                    <input type="button" id="removeShapeButton" value="Remove shape" onclick="OnClickButton(BUTTONMODE.Remove)" style="display:none" />
                </div>

                <div style="display:none">
                    <input type="button" value="Crear zona" onclick="OnCreateClick()" />
                    <input type="button" value="Crear ruta" onclick="OnCreateClick()" />
                    <input type="button" id="CreateMarker" value="Crear marker" onclick="OnCreateClick()" />
                    <div id="showonPolygon"><b> Area:</b> <span id="areaPolygon">&nbsp700;</span></div>
                </div>
                <div id="map" style="width:900px; height: 400px;"></div>
            </div>
        </div>
    </div>
</div>
@section Scripts
{
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB0hFla3KhpSUtpkjK7gqJVqfqUCI-7oFs&sensor=false&libraries=drawing"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
    <script src="~/Scripts/bootstrap-treeview.js"></script>
    <script src="~/Areas/GeoLocation/Scripts/Testing.js"></script>
    <script src="~/Scripts/underscore.js"></script>

    <script>
        var polygonArray = [];
        var editedPolygonArray = [];
        var currentSelectedItem = null
        var currentSelectedShape = null;

        var map;
        var drawingManager;
        var jsonList;

        $(document).ready(function () {
            jsonList = '@Html.Raw(Model.JsonShapeList)';
            CreateInputList(jsonList);
            InitializeMap();
            CreateShapes($.parseJSON(jsonList));
        });

        function CreateInputList(jsonList) {
            var $searchableTree = $('#tree').treeview({
                data: jsonList,
            });

            $('#tree').on('nodeSelected', function (event, data) { onNodeClick(data) })
            //Search
            var search = function (e) {
                var pattern = $('#input-search').val();
                var options = {
                    ignoreCase: true,
                    exactMatch: false,
                    revealResults: true,
                };
                var results = $searchableTree.treeview('search', [pattern, options]);
                var output = '<p>' + results.length + ' matches found</p>';
                $.each(results, function (index, result) {
                    output += '<p>- ' + result.text + '</p>';
                });
                $('#search-output').html(output);
            }
            //Eventos buscar
            $('#btn-search').on('click', search);
            $('#input-search').on('keyup', search);
            $('#btn-clear-search').on('click', function (e) {
                $searchableTree.treeview('clearSearch');
                $('#input-search').val('');
                $('#search-output').html('');
            });
        }

        function InitializeMap() {
            map = new google.maps.Map(document.getElementById("map"), {
                center: latLngCenterInit,
                zoom: 16,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            });
            //Drawing manager
            drawingManager = new google.maps.drawing.DrawingManager(drawingManagerPolygonOptions);

            google.maps.event.addListener(drawingManager, 'polygoncomplete', function (polygon) {
                OnFinishDrawing(polygon);
            });
            google.maps.event.addListener(drawingManager, 'markercomplete', function (marker) {
                OnFinishDrawing(marker);
            });
            google.maps.event.addListener(drawingManager, 'overlaycomplete', function (e) {
                var newShape = e.overlay;
                newShape.type = e.type;
                //setSelection(newShape);
                AddEventHandlersForShape(newShape);
                // Switch back to non-drawing mode after drawing a shape.
                drawingManager.setDrawingMode(null);
            });
            //google.maps.event.addListener(drawingManager, 'drawingmode_changed', clearSelection);
            //google.maps.event.addListener(map, 'click', clearSelection);
        }

        function CreateShapes(json) {
            json.forEach(function (element) {
                if (element.GeoOptions)
                    DrawShape(element);
                if (element.nodes) {
                    CreateShapes(element.nodes);
                }
            });
            editedPolygonArray = polygonArray;
        }

        function DrawShape(item) {
            switch (item.ShapeType)
            {
                case SHAPETYPE.Zone:
                case SHAPETYPE.Route:
                    var coords = item.GeoOptions.paths;
                    console.log(item)
                    var polygon = new google.maps.Polygon({
                        clickable: item.GeoOptions.clickable,
                        draggable: item.GeoOptions.draggable,
                        editable: item.GeoOptions.editable,
                        fillColor: item.GeoOptions.fillColor,
                        fillOpacity: item.GeoOptions.fillOpacity,
                        strokeWeight: item.GeoOptions.strokeWeight,
                        visible: item.GeoOptions.visible,
                        paths: coords,
                    });

                    AddAditionalPropertiesToPolygon(item, polygon);
                    AddEventHandlersForShape(polygon);
                    polygon.setMap(map);
                    polygonArray.push(polygon);
                    break;
                case SHAPETYPE.Client:
                    var marker = new google.maps.Marker({
                        position: item.GeoOptions.coords,
                        map: map,
                        title: item.RazonSocial,
                    });
                    AddAditionalPropertiesToPolygon(item, marker);
                    polygonArray.push(marker);
                    break;
                default:
                    throw "Invalid shapeType";
            }
        }

        function GetShapeFromMap(shapeId) {
            return _.findWhere(editedPolygonArray, { Id: shapeId });
        }

        function AddAditionalPropertiesToPolygon(item, shape) {
            shape.Id = item.Id;
            shape.Name = item.Name;
            shape.ShapeType = item.ShapeType;
            if (shape.ShapeType == SHAPETYPE.Route|| shape.ShapeType == SHAPETYPE.Client)
                shape.ParentId = item.ParentId;

        }

        function AddEventHandlersForShape(shape) {
            console.log(shape.type);
            google.maps.event.addListener(shape, 'click', function () {
                console.log("click");
                setSelection(shape);
            });

        }

        function OnClickButton(_buttonMode) {
            var shapeType = currentSelectedItem.ShapeType;
            var shape = GetShapeFromMap(currentSelectedItem.Id);
            var drawingMode;

            switch (_buttonMode) {
                case BUTTONMODE.Create:
                    if (shape)
                        throw "No se puede crear, ya existe en el mapa";
                    switch (shapeType) {
                        case SHAPETYPE.Zone:
                        case SHAPETYPE.Route:
                            drawingMode = google.maps.drawing.OverlayType.POLYGON;
                            break;
                        case SHAPETYPE.Client:
                            drawingMode = google.maps.drawing.OverlayType.MARKER
                            break;
                        default:
                            throw "No se reconoce el tipo de forma";
                    }
                    drawingManager.setDrawingMode(drawingMode);
                    drawingManager.setMap(map);
                    break;
                case BUTTONMODE.Edit:
                    if (!shape)
                        throw "No se puede editar, la forma no existe en el mapa.";
                    setSelection(shape);
                    break;
                case BUTTONMODE.Remove:
                    setSelection(shape);
                    RemoveSelectedPolygon();
                    EvaluateSelectedItem();
                    break;
                default:
                    throw "Error button mode";
                    break;
            }
        }

        function onNodeClick(data) {
            clearSelection();
            currentSelectedItem = data;
            EvaluateSelectedItem();
        }

        function EvaluateSelectedItem() {
            var shape = GetShapeFromMap(currentSelectedItem.Id);
            if (shape) {
                currentSelectedShape = shape;
                //---------Activa efecto zoom en el mapa---------
                switch (currentSelectedItem.ShapeType) {
                    case SHAPETYPE.Zone:
                    case SHAPETYPE.Route:
                        map.panTo(GetPolygonCenter(shape));
                        break;
                    case SHAPETYPE.Client:
                        map.panTo(shape.getPosition());
                        break;
                    default:
                        throw "Invalid shape";
                }
                $("#editShapeButton").slideDown();
                $("#removeShapeButton").slideDown();
                $("#createShapeButton").slideUp();
            }
            else {
                currentSelectedShape = null;
                $("#createShapeButton").slideDown();
                $("#editShapeButton").slideUp();
                $("#removeShapeButton").slideUp();
            }
        }

        function OnFinishDrawing(shape) {
            currentSelectedShape = shape;
            AddAditionalPropertiesToPolygon(currentSelectedItem, shape);

            var isAValidShape = IsAValidShape(shape);
            if (isAValidShape) {
                editedPolygonArray.push(shape);
            }
            else {
                RemoveSelectedPolygon();
                shape.setMap(null);
            }
            EvaluateSelectedItem();
        }
    </script>
}

